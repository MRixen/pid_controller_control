#pragma once
// USER DEFINED
const int SLOW_DOWN_CODE = 4;
const byte BYTES_TO_READ = 0x08;
const byte BYTES_TO_SEND = 0x08;
const long MAX_WAIT_TIME = 10000;
const int MAX_ERROR_COUNTER_MODESWITCH = 3;


// ---- MCP SETUP BEGIN----
//
// NOTE: The mcp2515 at the Raspberry Pi is the 0x20 / 0x01 first device
//
// ID for Motor 1 - Arduino Nano
//const byte REGISTER_TXB0SIDL_VALUE = 0x40;
//const byte REGISTER_TXB0SIDH_VALUE = 0x02;
//const byte REGISTER_TXB1SIDL_VALUE = 0x40;
//const byte REGISTER_TXB1SIDH_VALUE = 0x02;
//const byte REGISTER_TXB2SIDL_VALUE = 0x40;
//const byte REGISTER_TXB2SIDH_VALUE = 0x02;

//// ID for Motor 2 - Arduino Uno
//const byte REGISTER_TXB0SIDL_VALUE = 0x60;
//const byte REGISTER_TXB0SIDH_VALUE = 0x03;
//const byte REGISTER_TXB1SIDL_VALUE = 0x60;
//const byte REGISTER_TXB1SIDH_VALUE = 0x03;
//const byte REGISTER_TXB2SIDL_VALUE = 0x60;
//const byte REGISTER_TXB2SIDH_VALUE = 0x03;

byte REGISTER_TXB0SIDL_VALUE;
byte REGISTER_TXB0SIDH_VALUE;
byte REGISTER_TXB1SIDL_VALUE;
byte REGISTER_TXB1SIDH_VALUE;
byte REGISTER_TXB2SIDL_VALUE;
byte REGISTER_TXB2SIDH_VALUE;

// REGISTER MCP2515
const byte REGISTER_BFPCTRL = 0x0C;
const byte REGISTER_TXRTSCTRL = 0x0D;
const byte REGISTER_CANSTAT = 0x0E;
const byte REGISTER_CANCTRL = 0x0F;
const byte REGISTER_TEC = 0x1C;
const byte REGISTER_REC = 0x1D;
const byte REGISTER_CNF1 = 0x2A;
const byte REGISTER_CNF2 = 0x29;
const byte REGISTER_CNF3 = 0x28;
const byte REGISTER_CANINTE = 0x2B;
const byte REGISTER_CANINTF = 0x2C;
const byte REGISTER_EFLG = 0x2D;
const byte REGISTER_TXB0CTRL = 0x30;
const byte REGISTER_TXB1CTRL = 0x40;
const byte REGISTER_TXB2CTRL = 0x50;
const byte REGISTER_RXB0CTRL = 0x60;
const byte REGISTER_RXB1CTRL = 0x70;

const byte REGISTER_RXF0SIDL = 0x01;
const byte REGISTER_RXF1SIDL = 0x05;
const byte REGISTER_RXF2SIDL = 0x09;
const byte REGISTER_RXF3SIDL = 0x11;
const byte REGISTER_RXF4SIDL = 0x15;
const byte REGISTER_RXF5SIDL = 0x19;
const byte REGISTER_RXFxSIDL[] = { REGISTER_RXF0SIDL, REGISTER_RXF1SIDL ,REGISTER_RXF2SIDL ,REGISTER_RXF3SIDL ,REGISTER_RXF4SIDL, REGISTER_RXF5SIDL };

const byte REGISTER_RXF0SIDH = 0x00;
const byte REGISTER_RXF1SIDH = 0x04;
const byte REGISTER_RXF2SIDH = 0x08;
const byte REGISTER_RXF3SIDH = 0x10;
const byte REGISTER_RXF4SIDH = 0x14;
const byte REGISTER_RXF5SIDH = 0x18;
const byte REGISTER_RXFxSIDH[] = { REGISTER_RXF0SIDH, REGISTER_RXF1SIDH ,REGISTER_RXF2SIDH ,REGISTER_RXF3SIDH ,REGISTER_RXF4SIDH, REGISTER_RXF5SIDH };

const byte REGISTER_RXM0SIDL = 0x21;
const byte REGISTER_RXM1SIDL = 0x25;
const byte REGISTER_RXMxSIDL[] = { REGISTER_RXM0SIDL, REGISTER_RXM1SIDL };

const byte REGISTER_RXM0SIDH = 0x20;
const byte REGISTER_RXM1SIDH = 0x24;
const byte REGISTER_RXMxSIDH[] = { REGISTER_RXM0SIDH, REGISTER_RXM1SIDH };

const byte REGISTER_TXB0SIDH = 0x31;
const byte REGISTER_TXB0SIDL = 0x32;
const byte REGISTER_TXB0DLC = 0x35;
const byte REGISTER_TXB0D0 = 0x36;
const byte REGISTER_TXB0D1 = 0x37;
const byte REGISTER_TXB0D2 = 0x38;
const byte REGISTER_TXB0D3 = 0x39;
const byte REGISTER_TXB0D4 = 0x3A;
const byte REGISTER_TXB0D5 = 0x3B;
const byte REGISTER_TXB0D6 = 0x3C;
const byte REGISTER_TXB0D7 = 0x3D;
const byte REGISTER_TXB0Dx[] = { REGISTER_TXB0D0, REGISTER_TXB0D1, REGISTER_TXB0D2, REGISTER_TXB0D3, REGISTER_TXB0D4, REGISTER_TXB0D5, REGISTER_TXB0D6, REGISTER_TXB0D7 };
const byte REGISTER_TXB1SIDH = 0x41;
const byte REGISTER_TXB1SIDL = 0x42;
const byte REGISTER_TXB1DLC = 0x45;
const byte REGISTER_TXB1D0 = 0x46;
const byte REGISTER_TXB1D1 = 0x47;
const byte REGISTER_TXB1D2 = 0x48;
const byte REGISTER_TXB1D3 = 0x49;
const byte REGISTER_TXB1D4 = 0x4A;
const byte REGISTER_TXB1D5 = 0x4B;
const byte REGISTER_TXB1D6 = 0x4C;
const byte REGISTER_TXB1D7 = 0x4D;
const byte REGISTER_TXB1Dx[] = { REGISTER_TXB1D0, REGISTER_TXB1D1, REGISTER_TXB1D2, REGISTER_TXB1D3, REGISTER_TXB1D4, REGISTER_TXB1D5, REGISTER_TXB1D6, REGISTER_TXB1D7 };
const byte REGISTER_TXB2SIDH = 0x51;
const byte REGISTER_TXB2SIDL = 0x52;
const byte REGISTER_TXB2DLC = 0x55;
const byte REGISTER_TXB2D0 = 0x56;
const byte REGISTER_TXB2D1 = 0x57;
const byte REGISTER_TXB2D2 = 0x58;
const byte REGISTER_TXB2D3 = 0x59;
const byte REGISTER_TXB2D4 = 0x5A;
const byte REGISTER_TXB2D5 = 0x5B;
const byte REGISTER_TXB2D6 = 0x5C;
const byte REGISTER_TXB2D7 = 0x5D;
const byte REGISTER_TXB2Dx[] = { REGISTER_TXB2D0, REGISTER_TXB2D1, REGISTER_TXB2D2, REGISTER_TXB2D3, REGISTER_TXB2D4, REGISTER_TXB2D5, REGISTER_TXB2D6, REGISTER_TXB2D7 };
const byte REGISTER_RXB0D0 = 0x66;
const byte REGISTER_RXB0D1 = 0x67;
const byte REGISTER_RXB0D2 = 0x68;
const byte REGISTER_RXB0D3 = 0x69;
const byte REGISTER_RXB0D4 = 0x6A;
const byte REGISTER_RXB0D5 = 0x6B;
const byte REGISTER_RXB0D6 = 0x6C;
const byte REGISTER_RXB0D7 = 0x6D;
const byte REGISTER_RXB0Dx[] = { REGISTER_RXB0D0, REGISTER_RXB0D1, REGISTER_RXB0D2, REGISTER_RXB0D3, REGISTER_RXB0D4, REGISTER_RXB0D5, REGISTER_RXB0D6, REGISTER_RXB0D7 };
const byte REGISTER_RXB1D0 = 0x76;
const byte REGISTER_RXB1D1 = 0x77;
const byte REGISTER_RXB1D2 = 0x78;
const byte REGISTER_RXB1D3 = 0x79;
const byte REGISTER_RXB1D4 = 0x7A;
const byte REGISTER_RXB1D5 = 0x7B;
const byte REGISTER_RXB1D6 = 0x7C;
const byte REGISTER_RXB1D7 = 0x7D;
const byte REGISTER_RXB1Dx[] = { REGISTER_RXB1D0, REGISTER_RXB1D1, REGISTER_RXB1D2, REGISTER_RXB1D3, REGISTER_RXB1D4, REGISTER_RXB1D5, REGISTER_RXB1D6, REGISTER_RXB1D7 };
const byte REGISTER_CANSTAT_NORMAL_MODE = 0x00;
const byte REGISTER_CANSTAT_SLEEP_MODE = 0x20;
const byte REGISTER_CANSTAT_LOOPBACK_MODE = 0x40;
const byte REGISTER_CANSTAT_LISTEN_ONLY_MODE = 0x60;
const byte REGISTER_CANSTAT_CONFIGURATION_MODE = 0x80;
const byte REGISTER_CANCTRL_NORMAL_MODE = 0x00;
const byte REGISTER_CANCTRL_SLEEP_MODE = 0x20;
const byte REGISTER_CANCTRL_LOOPBACK_MODE = 0x40;
const byte REGISTER_CANCTRL_LISTEN_ONLY_MODE = 0x60;
const byte REGISTER_CANCTRL_CONFIGURATION_MODE = 0x80;

// REGISTER VALUES / DATA MCP2515
const byte REGISTER_CANINTF_VALUE_RESET_ALL_IF = 0x00;
const byte REGISTER_CANINTF_VALUE_RESET_MERRIF = 0x7F;
const byte REGISTER_CANINTF_VALUE_RESET_WAKIF = 0xBF;
const byte REGISTER_CANINTF_VALUE_RESET_ERRIF = 0xDF;
const byte REGISTER_CANINTF_VALUE_RESET_TX2IF = 0xEF;
const byte REGISTER_CANINTF_VALUE_RESET_TX1IF = 0xF7;
const byte REGISTER_CANINTF_VALUE_RESET_TX0IF = 0xFB;
const byte REGISTER_CANINTF_VALUE_RESET_RX1IF = 0xFD;
const byte REGISTER_CANINTF_VALUE_RESET_RX0IF = 0xFE;
const byte REGISTER_CANINTE_VALUE = 0x03; // Enable interrupt when rx buffer 0 full
const byte REGISTER_TXB0CTRL_VALUE = 0x00;
const byte REGISTER_TXB1CTRL_VALUE = 0x00;
const byte REGISTER_TXB2CTRL_VALUE = 0x00;
const byte REGISTER_RXB0CTRL_VALUE = 0x21; // Receive messages with standard identifier that meet filter criteria (filter 1)
const byte REGISTER_RXB1CTRL_VALUE = 0x22;  // Receive messages with standard identifier that meet filter criteria (filter 2)

const byte REGISTER_RXF0SIDL_VALUE = 0x01;
const byte REGISTER_RXF1SIDL_VALUE = 0xFF;
const byte REGISTER_RXF2SIDL_VALUE = 0xFF;
const byte REGISTER_RXF3SIDL_VALUE = 0xFF;
const byte REGISTER_RXF4SIDL_VALUE = 0xFF;
const byte REGISTER_RXF5SIDL_VALUE = 0xFF;
const byte REGISTER_RXFxSIDL_VALUE[] = { REGISTER_RXF0SIDL_VALUE, REGISTER_RXF1SIDL_VALUE , REGISTER_RXF2SIDL_VALUE , REGISTER_RXF3SIDL_VALUE , REGISTER_RXF4SIDL_VALUE , REGISTER_RXF5SIDL_VALUE };

const byte REGISTER_RXF0SIDH_VALUE = 0xFF;
const byte REGISTER_RXF1SIDH_VALUE = 0xFF;
const byte REGISTER_RXF2SIDH_VALUE = 0xFF;
const byte REGISTER_RXF3SIDH_VALUE = 0xFF;
const byte REGISTER_RXF4SIDH_VALUE = 0xFF;
const byte REGISTER_RXF5SIDH_VALUE = 0xFF;
const byte REGISTER_RXFxSIDH_VALUE[] = { REGISTER_RXF0SIDH_VALUE, REGISTER_RXF1SIDH_VALUE , REGISTER_RXF2SIDH_VALUE , REGISTER_RXF3SIDH_VALUE , REGISTER_RXF4SIDH_VALUE , REGISTER_RXF5SIDH_VALUE };

const byte REGISTER_RXM0SIDL_VALUE = 0xE0;
const byte REGISTER_RXM1SIDL_VALUE = 0xE0;
const byte REGISTER_RXMxSIDL_VALUE[] = { REGISTER_RXM0SIDL_VALUE, REGISTER_RXM1SIDL_VALUE };

const byte REGISTER_RXM0SIDH_VALUE = 0xFF;
const byte REGISTER_RXM1SIDH_VALUE = 0xFF;
const byte REGISTER_RXMxSIDH_VALUE[] = { REGISTER_RXM0SIDH_VALUE, REGISTER_RXM1SIDH_VALUE };

byte REGISTER_TXBxSIDL_VALUE[] = { REGISTER_TXB0SIDL_VALUE, REGISTER_TXB1SIDL_VALUE, REGISTER_TXB2SIDL_VALUE };
byte REGISTER_TXBxSIDH_VALUE[] = { REGISTER_TXB0SIDH_VALUE, REGISTER_TXB1SIDH_VALUE, REGISTER_TXB2SIDH_VALUE };

const byte REGISTER_CNF1_VALUE = 0x00;//0x03; // Baud rate prescaler calculated with application (Fosc = 8Mhz and CANspeed = 125kHz)
const byte REGISTER_CNF2_VALUE = 0xB8;//0x90; // BTLMODE = 1 (PHaseSegment 2 is configured with CNF 3) and PhaseSegment 1 = 8xTQ (7+1)
const byte REGISTER_CNF3_VALUE = 0x05;//0x02; // Set PhaseSegment 2 = 6xTQ (5+1)
bool currentTxBuffer[] = { true, false, false };

byte rxStateIst = 0x00;
const byte rxStateSoll = 0x03;

// SPI INSTRUCTIONS MCP2515
const byte SPI_INSTRUCTION_RESET = 0xC0;
const byte SPI_INSTRUCTION_READ = 0x03;
const byte SPI_INSTRUCTION_READ_RX_BUFFER0_SIDH = 0x90;
const byte SPI_INSTRUCTION_READ_RX_BUFFER0 = 0x92;
const byte SPI_INSTRUCTION_READ_RX_BUFFER1 = 0x96;
const byte SPI_INSTRUCTION_WRITE = 0x02;
const byte SPI_INSTRUCTION_LOAD_TX_BUFFER0_ID = 0x40;
const byte SPI_INSTRUCTION_LOAD_TX_BUFFER0_DATA = 0x41;
const byte SPI_INSTRUCTION_RTS_BUFFER0 = 0x81;
const byte SPI_INSTRUCTION_RTS_BUFFER1 = 0x82;
const byte SPI_INSTRUCTION_RTS_BUFFER2 = 0x84;
const byte SPI_INSTRUCTION_READ_STATUS = 0xA0;
const byte SPI_INSTRUCTION_RX_STATUS = 0xB0;
const byte SPI_INSTRUCTION_BIT_MODIFY = 0x05;
